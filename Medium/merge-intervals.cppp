//https://leetcode.com/problems/merge-intervals/
//Time Complexity O(N)
//Space COMplecity O(1)
//SORT IF THATS THE ONLY WAY

static bool myfunction (const int i, const int j) { return (i<j); }
vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.size()==0)
            return {};
        
        vector<vector<int>> ans;
        
        sort (intervals.begin(), intervals.end(),[](const auto & i, const auto & j) { return i[0]<j[0]; });
        ans.push_back(intervals[0]);
        for(int i = 1; i<intervals.size(); i++){
            vector<int> aux;
            if(ans.back()[1]>=intervals[i][0]){
                ans.back()[0]=(min(ans.back()[0],intervals[i][0]));
                ans.back()[1]=(max(ans.back()[1],intervals[i][1]));   
            }
        
            else{
                ans.push_back(intervals[i]);
            }
                
        }
        return ans;
}
